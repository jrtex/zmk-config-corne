/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define DEF 0
#define NUM 1
#define CHR 2
#define FUN 3
#define MED 4
#define NAV 5
#define DNV 6


&lt {
        tapping-term-ms = <250>;
};

/ {
        combos {
/*----------------------------------Combo Indexes------------------------------------------
|   0  |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  | 10  |  11  |
|  12  | 13  | 14  | 15  | 16  | 17  |   | 18  | 19  | 20  | 21  | 22  |  23  |
|  24  | 25  | 26  | 27  | 28  | 29  |   | 30  | 31  | 32  | 33  | 34  |  35  |
                   | 36  | 37  | 38  |   | 39  | 40  | 41  |
*/
                compatible = "zmk,combos";
                // Two hands
                combo_caps { // LSHIFT - RSHIFT: Caps word
                        bindings = <&caps_word>; key-positions = <24 35>; timeout-ms = <30>;
                };
                hr_combo_caps { // D - H: Caps word
                        bindings = <&caps_word>; key-positions = <28 31>; timeout-ms = <30>;
                };
                // Left hand
                combo_esc { // W - F: Escape
                        bindings = <&kp ESC>; key-positions = <2 3>; timeout-ms = <20>;
                };
                combo_tab { // F - P: Tab
                        bindings = <&kp TAB>; key-positions = <3 4>; timeout-ms = <20>;
                };
                combo_backspace { // R - S
                        bindings = <&kp BSPC>; key-positions = <14 15>; timeout-ms = <20>;
                };
                combo_delete { // S - T
                        bindings = <&kp DEL>; key-positions = <15 16>; timeout-ms = <20>;
                };
                combo_newline { // T - G
                        bindings = <&mm_newline>; key-positions = <16 17>; timeout-ms = <20>;
                };
                combo_deleteword { // R - S - T
                        bindings = <&kp LC(BSPC)>; key-positions = <14 15 16>; timeout-ms = <20>;
                };
                combo_deleteline { // A - R - S - T
                        bindings = <&kp LC(LS(BSPC))>; key-positions = <13 14 15 16>; timeout-ms = <20>;
                };
                combo_undo { // Z - X
                        bindings = <&kp LC(Z)>; key-positions = <25 26>; timeout-ms = <20>;
                };
                combo_copy { // X - C
                        bindings = <&kp LC(C)>; key-positions = <26 27>; timeout-ms = <20>;
                };
                combo_paste { // C - D
                        bindings = <&kp LC(V)>; key-positions = <27 28>; timeout-ms = <20>;
                };
                combo_cut { // X - C - D
                        bindings = <&kp LC(X)>; key-positions = <26 27 28>; timeout-ms = <20>;
                };
                combo_selectline { // D - V
                        bindings = <&select_line>; key-positions = <28 29>; timeout-ms = <20>;
                };
                // Right hand
                combo_dash { // N - E: Dash symbol
                        bindings = <&kp MINUS>; key-positions = <19 20>; timeout-ms = <20>;
                };
                combo_quote { // E - I: Quote
                        bindings = <&kp SQT>; key-positions = <20 21>; timeout-ms = <20>;
                };
                combo_equal { // N - E - I: Equal
                        bindings = <&kp EQUAL>; key-positions = <19 20 21>; timeout-ms = <30>;
                };
                combo_tilde { // L - U: Tilde symbol
                        bindings = <&tildegr>; key-positions = <7 8>; timeout-ms = <20>;
                };
                combo_scln { // U - Y: Semi-colon symbol
                        bindings = <&kp SEMI>; key-positions = <8 9>; timeout-ms = <20>;
                };
                combo_pipe { // N - H: Pipe symbol
                        bindings = <&kp PIPE>; key-positions = <19 31>; timeout-ms = <20>;
                };
                combo_slash { // N - U: Slash (forward)
                        bindings = <&kp FSLH>; key-positions = <8 19>; timeout-ms = <20>;
                };
                combo_bslash { // L - E: Backslash
                        bindings = <&kp BSLH>; key-positions = <8 21>; timeout-ms = <20>;
                };
                combo_lbrack { // E - H: Left Bracket
                        bindings = <&kp LBKT>; key-positions = <20 31>; timeout-ms = <20>;
                };
                combo_rbrack { // E - >: Right Bracket
                        bindings = <&kp RBKT>; key-positions = <20 33>; timeout-ms = <20>;
                };
        };

        macros {
                alt_tab: alt_tab {
                        label = "Alt-Tab";
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        bindings
                                = <&macro_press &kp RALT>
                                , <&macro_tap &kp TAB>
                                , <&macro_pause_for_release>
                                , <&macro_release &kp RALT>
                                ;
                };

                select_line: select_line {
                        label = "Select Line";
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        bindings
                                = <&macro_tap &kp END>
                                , <&macro_tap &kp LS(HOME)>
                                ;
                };

                new_line: new_line {
                        label = "New Line";
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        bindings
                                = <&macro_tap &kp END>
                                , <&macro_tap &kp RET>
                                ;
                };

                new_line_up: new_line_up {
                        label = "New Line Up";
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        bindings
                                = <&macro_tap &kp UP>
                                , <&macro_tap &kp END>
                                , <&macro_tap &kp RET>
                                ;
                };
        };

        behaviors {
                hm: homerow_mods {
                compatible = "zmk,behavior-hold-tap";
                label = "HOMEROW_MODS";
                #binding-cells = <2>;
                tapping-term-ms = <200>;
                quick-tap-ms = <0>;
                require-prior-idle-ms = <100>;
                flavor = "tap-preferred";
                bindings = <&kp>, <&kp>;
                };

                tildegr: tilde_grave {
                        compatible = "zmk,behavior-mod-morph";
                        label = "TILDE_GRAVE";
                        #binding-cells = <0>;
                        bindings = <&kp TILDE>, <&kp GRAVE>;
                        mods = <(MOD_LSFT|MOD_RSFT)>;
                };

                mm_newline: mm_newline {
                        compatible = "zmk,behavior-mod-morph";
                        label = "Mod-morph newline";
                        #binding-cells = <0>;
                        bindings = <&new_line>, <&new_line_up>;
                        mods = <(MOD_LSFT|MOD_RSFT)>;
                };
        };

// Max 9 characters per key
#define LTNAVA    &lt NAV A
#define HMLGUIZ   &hm LGUI Z
#define HMLALTX   &hm LALT X
#define HMLCTLC   &hm LCTRL C
#define HMLSFTD   &hm LSHFT D
#define HMRSFTH   &hm RSHFT H
#define HMRCTLCOM &hm RCTRL COMMA
#define HMRALTDOT &hm RALT DOT
#define HMRGUISLH &hm RGUI FSLH
#define LTDNVSPAC &lt DNV SPACE
#define STARSBL   &kp KP_MULTIPLY
#define BTCLR     &bt BT_CLR
#define BTSEL0    &bt BT_SEL 0
#define BTSEL1    &bt BT_SEL 1
#define BTSEL2    &bt BT_SEL 2
#define BTSEL3    &bt BT_SEL 3
#define BTSEL4    &bt BT_SEL 4
#define VOLUMUP   &kp C_VOL_UP
#define VOLUMDN   &kp C_VOL_DN
#define PREVIOUS  &kp C_PREV
#define NEXT      &kp C_NEXT
#define WORDLEFT  &kp LC(LEFT)
#define WORDRIGHT &kp LC(RIGHT)
#define DELWORD   &kp LC(BSPC)
#define TASKVIEW  &kp LG(TAB)
#define DESKLEFT  &kp LC(RG(LEFT))
#define DESKRIGHT &kp LC(RG(RIGHT))
#define LSTAB     &kp LS(TAB)

        keymap {
                compatible = "zmk,keymap";
/* 
// ----------------------------------Layer template----------------------------------------------------------------------------
                        bindings = <
    &trans    &trans    &trans    &trans    &trans    &trans      &trans    &trans    &trans    &trans    &trans    &trans
    &trans    &trans    &trans    &trans    &trans    &trans      &trans    &trans    &trans    &trans    &trans    &trans
    &trans    &trans    &trans    &trans    &trans    &trans      &trans    &trans    &trans    &trans    &trans    &trans
                                  &trans    &trans    &trans      &trans    &trans    &trans
                        >;
*/

                // Layer 0: DEF
                default_layer {
// ----------------------------------------------------------------------------------------------------------------------------
// |  TAB    |  Q      |  W      |  F      |  P      |  B      | |  J      |  L      |  U      |  Y      |  ;      | BKSP     |
// |  NAV    |  A      |  R      |  S      |  T      |  G      | |  M      |  N      |  E      |  I      |  O      |  '       |
// | LSHIFT  |  Z/GUI  |  X/LALT |  C/LCTL |  D/LSFT |  V      | |  K      |  H/RSFT |  ,/RCTL |  ./RALT |  /-RGUI | RSHIFT   |
//                               | OSM-CTRL| NUM     | SPACE   | | ENTER   | CHAR    | FUN     |
                        bindings = <
    &kp TAB   &kp Q     &kp W     &kp F     &kp P     &kp B       &kp J     &kp L     &kp U     &kp Y     &kp SEMI  &kp BSPC
    &mo NAV   LTNAVA    &kp R     &kp S     &kp T     &kp G       &kp M     &kp N     &kp E     &kp I     &kp O     &kp SQT
    &kp LSHFT HMLGUIZ   HMLALTX   HMLCTLC   HMLSFTD   &kp V       &kp K     HMRSFTH   HMRCTLCOM HMRALTDOT HMRGUISLH &kp RSHFT
                                  &sk LCTRL &mo NUM   LTDNVSPAC   &kp RET   &mo CHR   &mo FUN
                        >;
                };
                // layer 1: NUM
                numb_layer {
// ----------------------------------------------------------------------------------------------------------------------------
// |  ESC    |  !      |  @      |  #      |  $      |  %      | |  ^      |  &      |  *      |  (      |  )      | BKSP     |
// | CTRL    |  1      |  2      |  3      |  4      |  5      | |  6      |  7      |  8      |  9      |  O      |          |
// | SHFT    |         |         |         |         |         | |         |         |         |         |         |          |
//                               |         | ------- |         | |         | MED     |         |
                        bindings = <
    &kp ESC   &kp EXCL  &kp AT    &kp HASH  &kp DLLR  &kp PRCNT   &kp CARET &kp AMPS  STARSBL   &kp LPAR  &kp RPAR  &kp BSPC
    &kp LCTRL &kp N1    &kp N2    &kp N3    &kp N4    &kp N5      &kp N6    &kp N7    &kp N8    &kp N9    &kp N0    &kp SQT
    &kp LSHFT &trans    &trans    &trans    &trans    &trans      &trans    &trans    &trans    &trans    &trans    &trans
                                  &trans    &trans    &trans      &trans    &mo MED   &trans
                        >;
                };
                // layer 2: CHA
                char_layer {
// ----------------------------------------------------------------------------------------------------------------------------
// |  ESC    |         |         |         |         |         | |         |  ~      |  \      |  |      |         |          |
// | CTRL    |         |         |         |         |         | |         |  -      |  _      |  [      |  ]      |          |
// |         |         |         |         |         |         | |         |  +      |  =      |  {      |  }      |          |
//                               |         | MED     |         | |         | ------- |         |
                        bindings = <
    &kp ESC   &trans    &trans    &trans    &trans    &trans      &trans    &kp TILDE &kp BSLH  &kp PIPE  &kp GRAVE &trans
    &kp LCTRL &trans    &trans    &trans    &trans    &trans      &trans    &kp MINUS &kp UNDER &kp LBKT  &kp RBKT  &trans
    &trans    &trans    &trans    &trans    &trans    &trans      &trans    &kp PLUS  &kp EQUAL &kp LBRC  &kp RBRC  &trans
                                  &trans    &mo MED   &trans      &trans    &trans    &trans
                        >;
                };
                // layer 3: FUN
                func_layer {
// ----------------------------------------------------------------------------------------------------------------------------
// |         | F1      | F2      | F3      | F4      | F5      | | F6      | F7      | F8      | F9      | F10     |          |
// | CTRL    | F11     | F12     |         |         |         | |         |         |         |         |         |          |
// | BTCLR   | BT1     | BT2     | BT3     | BT4     | BT5     | |         |         |         |         |         |          |
//                               |         |         |         | |         |         | ------- |
                        bindings = <
    &trans    &kp F1    &kp F2    &kp F3    &kp F4    &kp F5      &kp F6    &kp F7    &kp F8    &kp F9    &kp F10   &trans
    &kp LCTRL &kp F11   &kp F12   &trans    &trans    &trans      &trans    &trans    &trans    &trans    &trans    &trans
    BTCLR     BTSEL0    BTSEL1    BTSEL2    BTSEL3    BTSEL4      &trans    &trans    &trans    &trans    &trans    &trans
                                  &trans    &trans    &trans      &trans    &trans    &trans
                        >;
                };
                // layer 4: MED
                media_layer {
// ----------------------------------------------------------------------------------------------------------------------------
// |         |         |         |         |         |         | |         |         |         |         | VOLDN   |         |
// |         |         |         |         |         |         | |         | PREVIOUS| PLAY    | NEXT    | VOLUP   |         |
// |         |         |         |         |         |         | |         |         |         |         |         |         |
//                               |         | ------- |         | |         | ------- |         |
                        bindings = <
    &trans    &trans    &trans    &trans    &trans    &trans      &trans    &trans    &trans    &trans    VOLUMUP   &trans
    &trans    &trans    &trans    &trans    &trans    &trans      &trans    PREVIOUS  &kp C_PP  NEXT      VOLUMDN   &trans
    &trans    &trans    &trans    &trans    &trans    &trans      &trans    &trans    &trans    &trans    &trans    &trans
                                  &trans    &trans    &trans      &trans    &trans    &trans
                        >;
                };
                // layer 5: NAV
                navigation_layer {
// ----------------------------------------------------------------------------------------------------------------------------
// |         |         | WORDLFT | UP      | WORDRGT |         | |         | INS     | HOME    | PAGEUP  |         | DELWORD  |
// | ------- |         | LEFT    | DOWN    | RIGHT   |         | |         | DEL     | END     | PAGEDN  |         |          |
// |         |         |         |         | APP     |         | |         |         |         |         |         |          |
//                               |         |         |         | |         |         |         |
                        bindings = <
    &trans    &trans    WORDLEFT  &kp UP    WORDRIGHT &trans      &trans    &kp INS   &kp HOME  &kp PG_UP &trans    DELWORD
    &trans    &trans    &kp LEFT  &kp DOWN  &kp RIGHT &trans      &trans    &kp DEL   &kp END   &kp PG_DN &trans    &trans
    &trans    &trans    &trans    &trans    &kp K_APP &trans      &trans    &trans    &trans    &trans    &trans    &trans
                                  &trans    &trans    &trans      &trans    &trans    &trans
                        >;
                };
                // layer 6: DNV
                desknav_layer {
// ----------------------------------------------------------------------------------------------------------------------------
// |         |         |         | TASKVIEW|         |         | |         |         |         |         |         |          |
// |         |         | DESKL   | TASKVIEW| DESKR   |         | |         |         |         |         |         |          |
// |         | DEL     | SHIFTTAB| ALT TAB | TAB     |         | |         |         |         |         |         |          |
//                               |         |         | ------- | |         |         |         |
                        bindings = <
    &trans    &trans    &trans    TASKVIEW  &trans    &trans      &trans    &trans    &trans    &trans    &trans    &trans
    &trans    &trans    DESKLEFT  TASKVIEW  DESKRIGHT &trans      &trans    &trans    &trans    &trans    &trans    &trans
    &trans    &kp DEL   LSTAB     &alt_tab  &kp TAB   &trans      &trans    &trans    &trans    &trans    &trans    &trans
                                  &trans    &trans    &trans      &trans    &trans    &trans
                        >;
                };
        };
};
