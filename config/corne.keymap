/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define DEF 0
#define NUM 1
#define CHR 2
#define FUN 3
#define MED 4
#define NAV 5
#define DNV 6

/*
// -----------------------------------------------------------------------------------------
// |      |     |     |     |     |     |   |     |     |     |     |     |      |
// |      |     |     |     |     |     |   |     |     |     |     |     |      |
// |      |     |     |     |     |     |   |     |     |     |     |     |      |
//                    |     |     |     |   |     |     |     |
                        bindings = <
   &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
   &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
   &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                           &trans  &trans  &trans    &trans  &trans  &trans
                        >;
*/

/ {
        behaviors {
                hm: homerow_mods {
                compatible = "zmk,behavior-hold-tap";
                label = "HOMEROW_MODS";
                #binding-cells = <2>;
                tapping-term-ms = <200>;
                quick-tap-ms = <0>;
                flavor = "tap-preferred";
                bindings = <&kp>, <&kp>;
        };
    };

        keymap {
                compatible = "zmk,keymap";

                // Layer 0: DEF
                default_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  Q  |  W  |  F  |  P  |  B  |   |  J  |  L   |  U  |  Y  |  ;  | BKSP |
// | CTRL |  A  |  R  |  S  |  T  |  G  |   |  M  |  N   |  E  |  I  |  O  |  '   |
// | SHFT |  Z  |  X  |  C  |  D  |  V  |   |  K  |  H   |  ,  |  .  |  /  | ESC  |
//                 | OSM-CTRL | LWR | SPC |   | ENT | RSE  | ALT |
                        bindings = <
   &kp TAB   &kp Q &kp W &kp F &kp P &kp B   &kp J &kp L  &kp U     &kp Y   &kp SEMI  &kp BSPC
   &mo NAV   &kp A &kp R &kp S &kp T &kp G   &kp M &kp N  &kp E     &kp I   &kp O     &kp SQT
   &kp LSHFT &hm LGUI Z &hm LALT X &hm LCTRL C &hm LSHIFT D &kp V   &kp K &hm RSHFT H &hm RCTRL COMMA &hm RALT DOT &hm RGUI FSLH &kp RSHFT
            &sk LSHFT  &mo NUM  &lt DNV SPACE   &kp RET  &mo CHR  &mo FUN
                        >;
                };
                // layer 1: NUM
                numb_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  1  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
// | CTRL |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  O  |      |
// | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
//                    | GUI | LWR | SPC |   | ENT | RSE | ALT |
                        bindings = <
   &kp ESC   &kp EXCL &kp AT   &kp HASH &kp DLLR &kp PRCNT   &kp CARET &kp AMPS &kp KP_MULTIPLY &kp LPAR &kp RPAR &kp BSPC
   &kp LCTRL &kp N1   &kp N2   &kp N3   &kp N4   &kp N5      &kp N6   &kp N7   &kp N8   &kp N9   &kp N0   &kp SQT
   &kp LSHFT &trans   &trans   &trans   &trans   &trans      &trans   &trans   &trans   &trans   &trans   &trans
                            &trans &trans  &trans          &trans  &mo MED  &trans
                        >;
                };
                // layer 2: CHA
                char_layer {
// -----------------------------------------------------------------------------------------
// |  ESC |     |     |     |     |     |   |     |  ~  |  \  |  |  |  `  | BKSP |
// | CTRL |     |     |     |     |     |   |     |  -  |  _  |  [  |  ]  |      |
// | CAPSWRD |  |     |     |     |     |   |     |  +  |  =  |  {  |  }  |      |
//                    | GUI | LWR | SPC |   | ENT | RSE | ALT |
                        bindings = <
   &kp ESC   &trans &trans &trans &trans &trans   &trans &kp TILDE &kp BSLH  &kp PIPE  &kp GRAVE &trans
   &kp LCTRL &trans &trans &trans &trans &trans   &trans &kp MINUS &kp UNDER &kp LBKT  &kp RBKT  &trans
   &caps_word &trans &trans &trans &trans &trans   &trans &kp PLUS  &kp EQUAL &kp LBRC  &kp RBRC  &trans
                  &trans &mo MED  &trans   &trans &trans  &trans
                        >;
                };
                // layer 3: FUN
                func_layer {
// -----------------------------------------------------------------------------------------
// |      |     |     |     |     |     |   |     |     |     |     |     |      |
// |      |     |     |     |     |     |   |     |     |     |     |     |      |
// |      |     |     |     |     |     |   |     |     |     |     |     |      |
//                    |     |     |     |   |     |     |     |
                        bindings = <
   &trans  &kp F1  &kp F2  &kp F3  &kp F4  &kp F5    &kp F6  &kp F7  &kp F8  &kp F9  &kp F10 &trans
   &trans  &kp F11 &kp F12 &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
   &bt BT_CLR &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4     &trans  &trans  &trans  &trans  &trans  &trans
                           &trans  &trans  &trans    &trans  &trans  &trans
                        >;
                };
                // layer 4: MED
                media_layer {
// -----------------------------------------------------------------------------------------
// |      |     |     |     |     |     |   |     |     |     |     |     |      |
// |      |     |     |     |     |     |   |     |     |     |     |     |      |
// |      |     |     |     |     |     |   |     |     |     |     |     |      |
//                    |     |     |     |   |     |     |     |
                        bindings = <
   &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &kp C_VOL_UP  &trans
   &trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp C_PREV &kp C_PP &kp C_NEXT  &kp C_VOL_DN  &trans
   &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                           &trans  &trans  &trans    &trans  &trans  &trans
                        >;
                };
                // layer 5: NAV
                navigation_layer {
// -----------------------------------------------------------------------------------------
// |      |     |     |     |     |     |   |     |     |     |     |     |      |
// |      |     |     |     |     |     |   |     |     |     |     |     |      |
// |      |     |     |     |     |     |   |     |     |     |     |     |      |
//                    |     |     |     |   |     |     |     |
                        bindings = <
   &trans  &trans  &kp LC(LEFT) &kp UP  &kp LC(RIGHT) &trans    &trans  &kp INS  &kp HOME  &kp PG_UP  &trans  &kp LC(BSPC)
   &trans  &trans  &kp LEFT &kp DOWN &kp RIGHT &trans   &trans  &kp DEL &kp END &kp PG_DN &trans &trans
   &trans  &trans  &trans  &trans  &kp K_APP  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                           &trans  &trans  &trans    &trans  &trans  &trans
                        >;
                };
                // layer 6: DNV
                desknav_layer {
// -----------------------------------------------------------------------------------------
// |      |     |     |     |     |     |   |     |     |     |     |     |      |
// |      |     |     |     |     |     |   |     |     |     |     |     |      |
// |      |     |     |     |     |     |   |     |     |     |     |     |      |
//                    |     |     |     |   |     |     |     |
                        bindings = <
   &trans  &trans  &trans  &kp LC(RG(UP))  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
   &trans  &trans  &kp LC(RG(LEFT)) &kp LC(RG(DOWN))  &kp LC(RG(RIGHT))  &trans    &trans  &trans  &trans  &trans  &trans  &trans
   &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                           &trans  &trans  &trans    &trans  &trans  &trans
                        >;
                };
        };
};
